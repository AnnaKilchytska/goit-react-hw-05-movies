{"version":3,"file":"static/js/597.8de6e36d.chunk.js","mappings":"oPAoEA,UA9DA,WACE,IAGQA,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAgCA,OA9BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,sCADJ,wCAEd,WAAuBN,GAAvB,0FAGYO,EAAAA,EAAAA,IAAWP,GAHvB,gBAEYQ,EAFZ,EAEIC,KAAQD,KAEVE,QAAQC,IAAI,OAAQH,GAIpBA,EAAKI,KAAI,SAAAC,GAGP,OAFAH,QAAQC,IAAIE,GAELT,GAAU,SAAAU,GAAI,wBAChBA,GADgB,CAEnB,CACEC,KAAMF,EAAOE,KACbC,UAAWH,EAAOG,UAClBC,MAC0B,OAAxBJ,EAAOK,aAAP,UACOZ,GADP,OACsBO,EAAOK,cACzB,OARW,GAWtB,IAtBH,2CAFc,6DA2BdC,CAAQnB,EACT,GAAE,CAACA,KAGF,UAAC,IAAD,WACqB,IAAlBG,EAAOiB,SACN,gFAEDjB,EAAOS,KAAI,SAAAS,GACV,OACE,iBAAKC,UAAU,OAAf,WACE,gBACEC,IAAKF,EAAMJ,MAAQI,EAAMJ,MA7CnC,uMA8CUO,IAAKH,EAAMN,KACXU,MAAM,WAER,uBAAIJ,EAAMN,QACV,eAAGO,UAAU,OAAb,WACE,iCADF,KACkB,0BAAOD,EAAML,kBARNU,EAAAA,EAAAA,MAY9B,MAGN,C,+LChEKC,EAAU,mCACVC,EAAW,gCAEJC,EAAiB,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEVC,EAAAA,EAAAA,IAAA,UACdH,EADc,sCACwBD,EADxB,iBACwCG,IAH9B,cAEvBrB,EAFuB,OAM7BC,QAAQC,IAAIF,GANiB,kBAOtBA,GAPsB,gCAS7BC,QAAQsB,IAAR,MAT6B,yDAAH,qDAajBC,EAAe,mCAAG,WAAMjC,GAAN,gGAER+B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8B5B,EAA9B,oBAA4C2B,IAFpC,cAErBlB,EAFqB,OAG3BC,QAAQC,IAAIF,GAHe,kBAIpBA,GAJoB,gCAM3BC,QAAQC,IAAR,MAN2B,yDAAH,sDAUfuB,EAAmB,mCAAG,WAAMC,GAAN,gGAEZJ,EAAAA,EAAAA,IAAA,UACdH,EADc,gCACkBD,EADlB,kBACmCQ,IAHvB,cAEzB1B,EAFyB,yBAKxBA,GALwB,gCAO/BC,QAAQC,IAAR,MAP+B,yDAAH,sDAWnBJ,EAAU,mCAAG,WAAMP,GAAN,gGAEH+B,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACG5B,EADH,4BACyB2B,IAHtB,cAEhBlB,EAFgB,OAKtBC,QAAQC,IAAI,WAAYF,GALF,kBAMfA,GANe,gCAQtBC,QAAQC,IAAR,MARsB,yDAAH,sDAYVyB,EAAY,mCAAG,WAAMpC,GAAN,gGAEL+B,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACG5B,EADH,4BACyB2B,IAHpB,cAElBlB,EAFkB,OAKxBC,QAAQC,IAAI,cAAeF,GALH,kBAMjBA,GANiB,gCAQxBC,QAAQC,IAAR,MARwB,yDAAH,qD,uDClDlB,IAkBIe,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACzC,EAAI0C,GAWvD,OARE1C,IAFF0C,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCredits } from 'services/api';\nimport { StyledCast } from './App.styled';\n\nfunction Cast() {\n  const defaultImg =\n    'https://static.vecteezy.com/system/resources/previews/006/693/445/original/camera-icon-template-black-color-editable-camera-icon-symbol-flat-illustration-for-graphic-and-web-design-free-vector.jpg';\n\n  const { id } = useParams();\n\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    const imageBaseURL = `https://image.tmdb.org/t/p/original`;\n    async function getCast(id) {\n      const {\n        data: { cast },\n      } = await getCredits(id);\n      console.log('cast', cast);\n\n      //   const imageBaseURL = await getImages();\n\n      cast.map(person => {\n        console.log(person);\n\n        return setActors(prev => [\n          ...prev,\n          {\n            name: person.name,\n            character: person.character,\n            image:\n              person.profile_path !== null\n                ? `${imageBaseURL}${person.profile_path}`\n                : null,\n          },\n        ]);\n      });\n    }\n\n    getCast(id);\n  }, [id]);\n\n  return (\n    <StyledCast>\n      {actors.length === 0 && (\n        <div>Seems like there is no information about the cast!</div>\n      )}\n      {actors.map(actor => {\n        return (\n          <div className=\"item\" key={nanoid()}>\n            <img\n              src={actor.image ? actor.image : defaultImg}\n              alt={actor.name}\n              width=\"240px\"\n            />\n            <p>{actor.name}</p>\n            <p className=\"role\">\n              <span>As</span> <span>{actor.character}</span>\n            </p>\n          </div>\n        );\n      })}\n    </StyledCast>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularFilms = async (page = 1) => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`\n    );\n\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.dir(error);\n  }\n};\n\nexport const fetchMoviesById = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMoviesByQuery = async query => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    console.log('api cast', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    console.log('api reviews', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const getImages = async () => {\n//   try {\n//     const data = await fetch(\n//       `https://api.themoviedb.org/3/configuration?api_key=${API_KEY}`\n//     );\n//     const parcedData = await data.json();\n//     const { images } = parcedData;\n\n//     const imageBaseURL = `${images.secure_base_url}${\n//       images.profile_sizes[images.profile_sizes.length - 1]\n//     }`;\n//     return imageBaseURL;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","actors","setActors","useEffect","imageBaseURL","getCredits","cast","data","console","log","map","person","prev","name","character","image","profile_path","getCast","length","actor","className","src","alt","width","nanoid","API_KEY","BASE_URL","fetchPopularFilms","page","axios","dir","fetchMoviesById","searchMoviesByQuery","query","fetchReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}