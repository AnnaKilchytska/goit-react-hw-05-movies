{"version":3,"file":"static/js/681.bcda0880.chunk.js","mappings":"2OA4CA,UAvCA,WACE,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA0BL,GAA1B,0FAGYM,EAAAA,EAAAA,IAAaN,GAHzB,gBAEYO,EAFZ,EAEIC,KAAQD,QAEVE,QAAQC,IAAI,UAAWH,GAEvBA,EAAQI,KAAI,SAAAC,GACV,OAAOR,GAAW,SAAAS,GAAI,wBACjBA,GADiB,CAEpB,CAAEC,OAAQF,EAAIE,OAAQC,QAASH,EAAIG,UAFf,GAIvB,IAXH,2CADc,yBAAC,SAAD,2BAedC,CAAWhB,EACZ,GAAE,CAACA,KAGF,2BACsB,IAAnBG,EAAQc,SAAgB,mEACzB,wBACGd,EAAQQ,KAAI,SAAAO,GACX,OACE,2BACE,qCAAaA,EAAOJ,WACpB,uBAAII,EAAOH,aAFJI,EAAAA,EAAAA,MAKZ,QAIR,C,+LCxCKC,EAAU,mCACVC,EAAW,gCAEJC,EAAiB,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,kBAEVC,EAAAA,EAAAA,IAAA,UACdH,EADc,sCACwBD,EADxB,iBACwCG,IAH9B,cAEvBf,EAFuB,OAM7BC,QAAQC,IAAIF,GANiB,kBAOtBA,GAPsB,gCAS7BC,QAAQgB,IAAR,MAT6B,yDAAH,qDAajBC,EAAe,mCAAG,WAAM1B,GAAN,gGAERwB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BrB,EAA9B,oBAA4CoB,IAFpC,cAErBZ,EAFqB,OAG3BC,QAAQC,IAAIF,GAHe,kBAIpBA,GAJoB,gCAM3BC,QAAQC,IAAR,MAN2B,yDAAH,sDAUfiB,EAAmB,mCAAG,WAAMC,GAAN,gGAEZJ,EAAAA,EAAAA,IAAA,UACdH,EADc,gCACkBD,EADlB,kBACmCQ,IAHvB,cAEzBpB,EAFyB,yBAKxBA,GALwB,gCAO/BC,QAAQC,IAAR,MAP+B,yDAAH,sDAWnBmB,EAAU,mCAAG,WAAM7B,GAAN,gGAEHwB,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACGrB,EADH,4BACyBoB,IAHtB,cAEhBZ,EAFgB,OAKtBC,QAAQC,IAAI,WAAYF,GALF,kBAMfA,GANe,gCAQtBC,QAAQC,IAAR,MARsB,yDAAH,sDAYVJ,EAAY,mCAAG,WAAMN,GAAN,gGAELwB,EAAAA,EAAAA,IAAA,UACdH,EADc,iBACGrB,EADH,4BACyBoB,IAHpB,cAElBZ,EAFkB,OAKxBC,QAAQC,IAAI,cAAeF,GALH,kBAMjBA,GANiB,gCAQxBC,QAAQC,IAAR,MARwB,yDAAH,qD,uDClDlB,IAkBIS,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAClC,EAAImC,GAWvD,OAREnC,IAFFmC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../services/api';\n\nfunction Reviews() {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function getReviews(id) {\n      const {\n        data: { results },\n      } = await fetchReviews(id);\n      console.log('reviews', results);\n\n      results.map(res => {\n        return setReviews(prev => [\n          ...prev,\n          { author: res.author, content: res.content },\n        ]);\n      });\n    }\n\n    getReviews(id);\n  }, [id]);\n\n  return (\n    <div>\n      {reviews.length === 0 && <p>There is no reviews of this movie yet!</p>}\n      <ul>\n        {reviews.map(review => {\n          return (\n            <li key={nanoid()}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularFilms = async (page = 1) => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`\n    );\n\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.dir(error);\n  }\n};\n\nexport const fetchMoviesById = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMoviesByQuery = async query => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    console.log('api cast', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    console.log('api reviews', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const getImages = async () => {\n//   try {\n//     const data = await fetch(\n//       `https://api.themoviedb.org/3/configuration?api_key=${API_KEY}`\n//     );\n//     const parcedData = await data.json();\n//     const { images } = parcedData;\n\n//     const imageBaseURL = `${images.secure_base_url}${\n//       images.profile_sizes[images.profile_sizes.length - 1]\n//     }`;\n//     return imageBaseURL;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","fetchReviews","results","data","console","log","map","res","prev","author","content","getReviews","length","review","nanoid","API_KEY","BASE_URL","fetchPopularFilms","page","axios","dir","fetchMoviesById","searchMoviesByQuery","query","getCredits","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}