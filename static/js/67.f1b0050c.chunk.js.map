{"version":3,"file":"static/js/67.f1b0050c.chunk.js","mappings":"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","sources":["components/FilmsList.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { StyledFilmList, StyledLink } from './App.styled';\n\nfunction FilmsList({ movies }) {\n  const location = useLocation();\n\n  return (\n    <StyledFilmList>\n      {movies.map(movie => {\n        return (\n          <li key={nanoid()}>\n            <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </StyledLink>\n          </li>\n        );\n      })}\n    </StyledFilmList>\n  );\n}\n\nFilmsList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape()),\n};\n\nexport default FilmsList;\n","import PropTypes from 'prop-types';\nimport { StyledSearchBar } from './App.styled';\n\nfunction Searchbar({ onFormSubmit }) {\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.elements.query.value;\n    // console.log(query);\n    if (!query) alert('Plese, enter your request!');\n    onFormSubmit(query);\n    e.target.reset();\n  };\n  return (\n    <StyledSearchBar onSubmit={handleFormSubmit}>\n      <label>\n        <input type=\"text\" name=\"query\" />\n      </label>\n      <button type=\"submit\">Search</button>\n    </StyledSearchBar>\n  );\n}\n\nSearchbar.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import FilmsList from 'components/FilmsList';\nimport Searchbar from 'components/Searchbar';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMoviesByQuery } from 'services/api';\n\nfunction Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  //   const query = searchParams.get('query');\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    console.log(query);\n    if (!query) return;\n\n    async function getMovie(query) {\n      try {\n        const {\n          data: { results: movies },\n        } = await searchMoviesByQuery(query);\n        console.log('movies', movies);\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMovie(query);\n  }, [searchParams]);\n\n  const handleSubmit = query => {\n    // console.log(query);\n    setSearchParams({ query });\n  };\n\n  return (\n    <div>\n      <Searchbar onFormSubmit={handleSubmit} />\n      {movies.length !== 0 && <FilmsList movies={movies} />}\n    </div>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularFilms = async (page = 1) => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`\n    );\n\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.dir(error);\n  }\n};\n\nexport const fetchMoviesById = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMoviesByQuery = async query => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    console.log('api cast', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    console.log('api reviews', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const getImages = async () => {\n//   try {\n//     const data = await fetch(\n//       `https://api.themoviedb.org/3/configuration?api_key=${API_KEY}`\n//     );\n//     const parcedData = await data.json();\n//     const { images } = parcedData;\n\n//     const imageBaseURL = `${images.secure_base_url}${\n//       images.profile_sizes[images.profile_sizes.length - 1]\n//     }`;\n//     return imageBaseURL;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","nanoid","onFormSubmit","onSubmit","e","preventDefault","query","target","elements","value","alert","reset","type","name","useSearchParams","searchParams","setSearchParams","useState","setMovies","useEffect","get","searchMoviesByQuery","data","results","console","log","getMovie","length","FilmsList","API_KEY","BASE_URL","fetchPopularFilms","page","axios","dir","fetchMoviesById","getCredits","fetchReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}