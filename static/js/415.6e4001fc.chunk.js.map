{"version":3,"file":"static/js/415.6e4001fc.chunk.js","mappings":"8KA2BA,IAtBA,YAAgC,IAAXA,EAAU,EAAVA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,UACGF,EAAOG,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAYC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAtD,SACGG,EAAMK,UAFFC,EAAAA,EAAAA,MAMZ,KAGN,C,yGCDD,UAhBA,WACE,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,uGAGYC,EAAAA,EAAAA,IAAkB,GAH9B,gBAEqBH,EAFrB,EAEII,KAAQC,QAEVC,QAAQC,IAAI,QAASP,GACrBC,EAASD,GALX,2CADc,yBAAC,WAAD,wBAQdQ,EACD,GAAE,KAEI,yBAAuB,IAAjBR,EAAMS,SAAgB,SAAC,IAAD,CAAWrB,OAAQY,KACvD,C,+LChBKU,EAAU,mCACVC,EAAW,gCAEJR,EAAiB,mCAAG,yGAAOS,EAAP,+BAAc,EAAd,kBAEVC,EAAAA,EAAAA,IAAA,UACdF,EADc,sCACwBD,EADxB,iBACwCE,IAH9B,cAEvBR,EAFuB,OAM7BE,QAAQC,IAAIH,GANiB,kBAOtBA,GAPsB,gCAS7BE,QAAQQ,IAAR,MAT6B,yDAAH,qDAajBC,EAAe,mCAAG,WAAMrB,GAAN,gGAERmB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BjB,EAA9B,oBAA4CgB,IAFpC,cAErBN,EAFqB,OAG3BE,QAAQC,IAAIH,GAHe,kBAIpBA,GAJoB,gCAM3BE,QAAQC,IAAR,MAN2B,yDAAH,sDAUfS,EAAmB,mCAAG,WAAMC,GAAN,gGAEZJ,EAAAA,EAAAA,IAAA,UACdF,EADc,gCACkBD,EADlB,kBACmCO,IAHvB,cAEzBb,EAFyB,yBAKxBA,GALwB,gCAO/BE,QAAQC,IAAR,MAP+B,yDAAH,sDAWnBW,EAAU,mCAAG,WAAMxB,GAAN,gGAEHmB,EAAAA,EAAAA,IAAA,UACdF,EADc,iBACGjB,EADH,4BACyBgB,IAHtB,cAEhBN,EAFgB,OAKtBE,QAAQC,IAAI,WAAYH,GALF,kBAMfA,GANe,gCAQtBE,QAAQC,IAAR,MARsB,yDAAH,sDAYVY,EAAY,mCAAG,WAAMzB,GAAN,gGAELmB,EAAAA,EAAAA,IAAA,UACdF,EADc,iBACGjB,EADH,4BACyBgB,IAHpB,cAElBN,EAFkB,OAKxBE,QAAQC,IAAI,cAAeH,GALH,kBAMjBA,GANiB,gCAQxBE,QAAQC,IAAR,MARwB,yDAAH,qD,uDClDlB,IAkBIT,EAAS,eAACsB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC9B,EAAI+B,GAWvD,OARE/B,IAFF+B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/FilmsList.jsx","pages/Home.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { StyledFilmList, StyledLink } from './App.styled';\n\nfunction FilmsList({ movies }) {\n  const location = useLocation();\n\n  return (\n    <StyledFilmList>\n      {movies.map(movie => {\n        return (\n          <li key={nanoid()}>\n            <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </StyledLink>\n          </li>\n        );\n      })}\n    </StyledFilmList>\n  );\n}\n\nFilmsList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape()),\n};\n\nexport default FilmsList;\n","import FilmsList from 'components/FilmsList';\nimport { useEffect, useState } from 'react';\nimport { fetchPopularFilms } from '../services/api';\n\nfunction Home() {\n  const [films, setFilms] = useState('');\n  useEffect(() => {\n    async function getFilms() {\n      const {\n        data: { results: films },\n      } = await fetchPopularFilms(1);\n      console.log('films', films);\n      setFilms(films);\n    }\n    getFilms();\n  }, []);\n\n  return <div>{films.length !== 0 && <FilmsList movies={films} />}</div>;\n}\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularFilms = async (page = 1) => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`\n    );\n\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.dir(error);\n  }\n};\n\nexport const fetchMoviesById = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMoviesByQuery = async query => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    console.log('api cast', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    console.log('api reviews', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const getImages = async () => {\n//   try {\n//     const data = await fetch(\n//       `https://api.themoviedb.org/3/configuration?api_key=${API_KEY}`\n//     );\n//     const parcedData = await data.json();\n//     const { images } = parcedData;\n\n//     const imageBaseURL = `${images.secure_base_url}${\n//       images.profile_sizes[images.profile_sizes.length - 1]\n//     }`;\n//     return imageBaseURL;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","nanoid","useState","films","setFilms","useEffect","fetchPopularFilms","data","results","console","log","getFilms","length","API_KEY","BASE_URL","page","axios","dir","fetchMoviesById","searchMoviesByQuery","query","getCredits","fetchReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}